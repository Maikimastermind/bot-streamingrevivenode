{"_id":"@cacheable/utils","_rev":"6-0d406f9b91b893db477a6ebc46b17c27","name":"@cacheable/utils","dist-tags":{"latest":"2.0.2"},"versions":{"1.0.0":{"name":"@cacheable/utils","version":"1.0.0","keywords":["cacheable","caching","utilities","hashing","keyv","cache utils"],"author":{"name":"Jared Wray","email":"me@jaredwray.com"},"license":"MIT","_id":"@cacheable/utils@1.0.0","maintainers":[{"name":"jaredwray","email":"me@jaredwray.com"}],"homepage":"https://github.com/jaredwray/cacheable#readme","bugs":{"url":"https://github.com/jaredwray/cacheable/issues"},"dist":{"shasum":"841debda3ed2d4ab8a56ce36874f3155c25edacb","tarball":"https://registry.npmjs.org/@cacheable/utils/-/utils-1.0.0.tgz","fileCount":7,"integrity":"sha512-zhvGyJ1dKYhb72bPNrZyUcgRFAkhI5EhFyYFBBoszq327IYct/Np/8jh7zJBRdFrwF5HTiSVMacEKWg3Jbm5Yw==","signatures":[{"sig":"MEQCIDFDSCg841LRQNrfbFqtcQPHcP8WwJrJxUK5Fyanx11pAiAqdEeXWKoZ7Eb7eMnjdXdgKHT4fIXTiJ6Wcsy/Wesg3w==","keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U"}],"unpackedSize":44785},"main":"./dist/index.cjs","type":"module","_from":"file:cacheable-utils-1.0.0.tgz","types":"./dist/index.d.ts","module":"./dist/index.js","exports":{".":{"import":"./dist/index.js","require":"./dist/index.cjs"}},"private":false,"scripts":{"test":"xo --fix && vitest run --coverage","build":"rimraf ./dist && tsup src/index.ts --format cjs,esm --dts --clean","clean":"rimraf ./dist ./coverage ./node_modules","test:ci":"xo && vitest run --coverage","prepublish":"pnpm build"},"_npmUser":{"name":"jaredwray","email":"me@jaredwray.com"},"_resolved":"/private/var/folders/q4/x95kq1ln6cd7rrnct9cby32r0000gn/T/10ce4ef5ffa8d433ec49a717dbbc1af0/cacheable-utils-1.0.0.tgz","_integrity":"sha512-zhvGyJ1dKYhb72bPNrZyUcgRFAkhI5EhFyYFBBoszq327IYct/Np/8jh7zJBRdFrwF5HTiSVMacEKWg3Jbm5Yw==","repository":{"url":"git+https://github.com/jaredwray/cacheable.git","type":"git","directory":"packages/utils"},"_npmVersion":"11.4.2","description":"Cacheable Utilities for Caching Libraries","directories":{},"_nodeVersion":"22.12.0","_hasShrinkwrap":false,"devDependencies":{"xo":"^1.2.1","tsup":"^8.5.0","rimraf":"^6.0.1","vitest":"^3.2.4","lru-cache":"^11.1.0","typescript":"^5.8.3","@keyv/redis":"^5.0.0","@types/node":"^24.1.0","@keyv/valkey":"^1.0.7","@types/eslint":"^9.6.1","@faker-js/faker":"^9.9.0","@vitest/coverage-v8":"^3.2.4"},"_npmOperationalInternal":{"tmp":"tmp/utils_1.0.0_1753418756717_0.97514964993953","host":"s3://npm-registry-packages-npm-production"}},"1.1.0":{"name":"@cacheable/utils","version":"1.1.0","keywords":["cacheable","caching","utilities","hashing","keyv","cache utils"],"author":{"name":"Jared Wray","email":"me@jaredwray.com"},"license":"MIT","_id":"@cacheable/utils@1.1.0","maintainers":[{"name":"jaredwray","email":"me@jaredwray.com"}],"homepage":"https://github.com/jaredwray/cacheable#readme","bugs":{"url":"https://github.com/jaredwray/cacheable/issues"},"dist":{"shasum":"074fa3d85f072be4e56187ae6383f21b147779e8","tarball":"https://registry.npmjs.org/@cacheable/utils/-/utils-1.1.0.tgz","fileCount":7,"integrity":"sha512-5EYIHSQy8S02Z8tuvfNWGZcgnPrkMF++LjqyFGOG85CSrf/kEB6hCH3F2TVN1LrlkiUk+hviXunDwsCVmwZNxg==","signatures":[{"sig":"MEUCICVTcdt4nHPARUw19zjTKGUMA0wsqX32Qv3gqXTpN40/AiEA4/NC7DXA9lEXWpVsGlVpHIOCMtVl4QP5soSBGhDoa8Q=","keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U"}],"unpackedSize":45222},"main":"./dist/index.cjs","type":"module","_from":"file:cacheable-utils-1.1.0.tgz","types":"./dist/index.d.ts","module":"./dist/index.js","exports":{".":{"import":"./dist/index.js","require":"./dist/index.cjs"}},"private":false,"scripts":{"test":"xo --fix && vitest run --coverage","build":"rimraf ./dist && tsup src/index.ts --format cjs,esm --dts --clean","clean":"rimraf ./dist ./coverage ./node_modules","test:ci":"xo && vitest run --coverage","prepublish":"pnpm build"},"_npmUser":{"name":"jaredwray","email":"me@jaredwray.com"},"_resolved":"/private/var/folders/q4/x95kq1ln6cd7rrnct9cby32r0000gn/T/4926c8c7f2c20b5592207eb644ed6c8e/cacheable-utils-1.1.0.tgz","_integrity":"sha512-5EYIHSQy8S02Z8tuvfNWGZcgnPrkMF++LjqyFGOG85CSrf/kEB6hCH3F2TVN1LrlkiUk+hviXunDwsCVmwZNxg==","repository":{"url":"git+https://github.com/jaredwray/cacheable.git","type":"git","directory":"packages/utils"},"_npmVersion":"11.4.2","description":"Cacheable Utilities for Caching Libraries","directories":{},"_nodeVersion":"22.12.0","_hasShrinkwrap":false,"devDependencies":{"xo":"^1.2.1","tsup":"^8.5.0","rimraf":"^6.0.1","vitest":"^3.2.4","lru-cache":"^11.1.0","typescript":"^5.8.3","@keyv/redis":"^5.0.0","@types/node":"^24.1.0","@keyv/valkey":"^1.0.7","@types/eslint":"^9.6.1","@faker-js/faker":"^9.9.0","@vitest/coverage-v8":"^3.2.4"},"_npmOperationalInternal":{"tmp":"tmp/utils_1.1.0_1753931672130_0.4074764019517554","host":"s3://npm-registry-packages-npm-production"}},"1.1.1":{"name":"@cacheable/utils","version":"1.1.1","keywords":["cacheable","caching","utilities","hashing","keyv","cache utils"],"author":{"name":"Jared Wray","email":"me@jaredwray.com"},"license":"MIT","_id":"@cacheable/utils@1.1.1","maintainers":[{"name":"jaredwray","email":"me@jaredwray.com"}],"homepage":"https://github.com/jaredwray/cacheable#readme","bugs":{"url":"https://github.com/jaredwray/cacheable/issues"},"dist":{"shasum":"f77b0ac0ae1365aecf1175d3482a608272ae6809","tarball":"https://registry.npmjs.org/@cacheable/utils/-/utils-1.1.1.tgz","fileCount":7,"integrity":"sha512-Mf738OOJY1oiVccaIsmAsQffNInAb2Oz7v1gjOSSkCZUrefyVTJRdiwBJ+uu8Q18JMrwwbdPA6XC2SeHLrhLvQ==","signatures":[{"sig":"MEYCIQDzY+q7aFFlt+iLNSmo+mnuOYw0k+DyCoPf9m3MU2uDzgIhAIi8x+IrhuIxJAnDtuf4xNWvdeuaqZImndGaaKIM+IUM","keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U"}],"unpackedSize":44823},"main":"./dist/index.cjs","type":"module","_from":"file:cacheable-utils-1.1.1.tgz","types":"./dist/index.d.ts","module":"./dist/index.js","exports":{".":{"import":"./dist/index.js","require":"./dist/index.cjs"}},"private":false,"scripts":{"lint":"biome check --write --error-on-warnings","test":"pnpm lint && vitest run --coverage","build":"rimraf ./dist && tsup src/index.ts --format cjs,esm --dts --clean","clean":"rimraf ./dist ./coverage ./node_modules","test:ci":"biome check --error-on-warnings && vitest run --coverage","prepublish":"pnpm build"},"_npmUser":{"name":"jaredwray","email":"me@jaredwray.com"},"_resolved":"/private/var/folders/q4/x95kq1ln6cd7rrnct9cby32r0000gn/T/a1ad0674a648adab0654e0c550491d61/cacheable-utils-1.1.1.tgz","_integrity":"sha512-Mf738OOJY1oiVccaIsmAsQffNInAb2Oz7v1gjOSSkCZUrefyVTJRdiwBJ+uu8Q18JMrwwbdPA6XC2SeHLrhLvQ==","repository":{"url":"git+https://github.com/jaredwray/cacheable.git","type":"git","directory":"packages/utils"},"_npmVersion":"11.4.2","description":"Cacheable Utilities for Caching Libraries","directories":{},"_nodeVersion":"22.12.0","_hasShrinkwrap":false,"devDependencies":{"tsup":"^8.5.0","rimraf":"^6.0.1","vitest":"^3.2.4","lru-cache":"^11.1.0","typescript":"^5.9.2","@keyv/redis":"^5.1.1","@types/node":"^24.3.0","@keyv/valkey":"^1.0.8","@biomejs/biome":"^2.2.2","@faker-js/faker":"^10.0.0","@vitest/coverage-v8":"^3.2.4"},"_npmOperationalInternal":{"tmp":"tmp/utils_1.1.1_1756246776681_0.5049738467759095","host":"s3://npm-registry-packages-npm-production"}},"2.0.0":{"name":"@cacheable/utils","version":"2.0.0","keywords":["cacheable","caching","utilities","hashing","keyv","cache utils"],"author":{"name":"Jared Wray","email":"me@jaredwray.com"},"license":"MIT","_id":"@cacheable/utils@2.0.0","maintainers":[{"name":"jaredwray","email":"me@jaredwray.com"}],"homepage":"https://github.com/jaredwray/cacheable#readme","bugs":{"url":"https://github.com/jaredwray/cacheable/issues"},"dist":{"shasum":"91d9d8f34e7ce4790d44a37b57f01d1ea5093d35","tarball":"https://registry.npmjs.org/@cacheable/utils/-/utils-2.0.0.tgz","fileCount":7,"integrity":"sha512-Y+ZxdxSo2ErcROjNCdButjobQDuu4mpx875uhItK6ZqW3XmDikG+YIjh30ELfOZnVFjxfpvgjz57HbYJ0m1ApQ==","signatures":[{"sig":"MEYCIQDd6zyJFqS+xtLkRWP7n49KxmOuZgFHjqMyjn3ycPscnwIhAPzNDLZyPG3l7X4RZbeWZIkqqp6XiUmzIgURT/StUw1e","keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U"}],"unpackedSize":40071},"main":"./dist/index.cjs","type":"module","_from":"file:cacheable-utils-2.0.0.tgz","types":"./dist/index.d.ts","module":"./dist/index.js","exports":{".":{"import":"./dist/index.js","require":"./dist/index.cjs"}},"private":false,"scripts":{"lint":"biome check --write --error-on-warnings","test":"pnpm lint && vitest run --coverage","build":"rimraf ./dist && tsup src/index.ts --format cjs,esm --dts --clean --minify","clean":"rimraf ./dist ./coverage ./node_modules","test:ci":"biome check --error-on-warnings && vitest run --coverage","prepublish":"pnpm build"},"_npmUser":{"name":"jaredwray","email":"me@jaredwray.com"},"_resolved":"/private/var/folders/h1/n3vxgc0n1sn5_9pxftc4p6l80000gn/T/250fc3d4a38cb29b480582bcbdc810e9/cacheable-utils-2.0.0.tgz","_integrity":"sha512-Y+ZxdxSo2ErcROjNCdButjobQDuu4mpx875uhItK6ZqW3XmDikG+YIjh30ELfOZnVFjxfpvgjz57HbYJ0m1ApQ==","repository":{"url":"git+https://github.com/jaredwray/cacheable.git","type":"git","directory":"packages/utils"},"_npmVersion":"11.4.1","description":"Cacheable Utilities for Caching Libraries","directories":{},"_nodeVersion":"20.17.0","_hasShrinkwrap":false,"devDependencies":{"tsup":"^8.5.0","rimraf":"^6.0.1","vitest":"^3.2.4","lru-cache":"^11.1.0","typescript":"^5.9.2","@keyv/redis":"^5.1.1","@types/node":"^24.3.0","@keyv/valkey":"^1.0.8","@biomejs/biome":"^2.2.2","@faker-js/faker":"^10.0.0","@vitest/coverage-v8":"^3.2.4"},"_npmOperationalInternal":{"tmp":"tmp/utils_2.0.0_1757440527465_0.27365247557878947","host":"s3://npm-registry-packages-npm-production"}},"2.0.1":{"name":"@cacheable/utils","version":"2.0.1","keywords":["cacheable","caching","utilities","hashing","keyv","cache utils"],"author":{"name":"Jared Wray","email":"me@jaredwray.com"},"license":"MIT","_id":"@cacheable/utils@2.0.1","maintainers":[{"name":"jaredwray","email":"me@jaredwray.com"}],"homepage":"https://github.com/jaredwray/cacheable#readme","bugs":{"url":"https://github.com/jaredwray/cacheable/issues"},"dist":{"shasum":"f444dcacf8cf213a0c1b0493b0520c757698045f","tarball":"https://registry.npmjs.org/@cacheable/utils/-/utils-2.0.1.tgz","fileCount":7,"integrity":"sha512-sxHjO6wKn4/0wHCFYbh6tljj+ciP9BKgyBi09NLsor3sN+nu/Rt3FwLw6bYp7bp8usHpmcwUozrB/u4RuSw/eg==","signatures":[{"sig":"MEUCIFMQBUZnS6LlVgzwYi3vuqeH7G5UJpPWwn2pZhs7sl/cAiEAp9tCPktiGihn2dBjbR0J8O/qk4WS3xbuQK8nwWXha9A=","keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U"}],"unpackedSize":40071},"main":"./dist/index.cjs","type":"module","_from":"file:cacheable-utils-2.0.1.tgz","types":"./dist/index.d.ts","module":"./dist/index.js","exports":{".":{"import":"./dist/index.js","require":"./dist/index.cjs"}},"private":false,"scripts":{"lint":"biome check --write --error-on-warnings","test":"pnpm lint && vitest run --coverage","build":"rimraf ./dist && tsup src/index.ts --format cjs,esm --dts --clean --minify","clean":"rimraf ./dist ./coverage ./node_modules","test:ci":"biome check --error-on-warnings && vitest run --coverage","prepublish":"pnpm build"},"_npmUser":{"name":"jaredwray","email":"me@jaredwray.com"},"_resolved":"/private/var/folders/q4/x95kq1ln6cd7rrnct9cby32r0000gn/T/ce7b5dba8ffa12bd58b630737f081079/cacheable-utils-2.0.1.tgz","_integrity":"sha512-sxHjO6wKn4/0wHCFYbh6tljj+ciP9BKgyBi09NLsor3sN+nu/Rt3FwLw6bYp7bp8usHpmcwUozrB/u4RuSw/eg==","repository":{"url":"git+https://github.com/jaredwray/cacheable.git","type":"git","directory":"packages/utils"},"_npmVersion":"11.4.2","description":"Cacheable Utilities for Caching Libraries","directories":{},"_nodeVersion":"22.12.0","_hasShrinkwrap":false,"devDependencies":{"tsup":"^8.5.0","rimraf":"^6.0.1","vitest":"^3.2.4","lru-cache":"^11.1.0","typescript":"^5.9.2","@keyv/redis":"^5.1.1","@types/node":"^24.3.0","@keyv/valkey":"^1.0.8","@biomejs/biome":"^2.2.2","@faker-js/faker":"^10.0.0","@vitest/coverage-v8":"^3.2.4"},"_npmOperationalInternal":{"tmp":"tmp/utils_2.0.1_1758048816961_0.2854037705055812","host":"s3://npm-registry-packages-npm-production"}},"2.0.2":{"name":"@cacheable/utils","version":"2.0.2","description":"Cacheable Utilities for Caching Libraries","type":"module","main":"./dist/index.cjs","module":"./dist/index.js","types":"./dist/index.d.ts","exports":{".":{"require":"./dist/index.cjs","import":"./dist/index.js"}},"repository":{"type":"git","url":"git+https://github.com/jaredwray/cacheable.git","directory":"packages/utils"},"author":{"name":"Jared Wray","email":"me@jaredwray.com"},"license":"MIT","private":false,"devDependencies":{"@biomejs/biome":"^2.2.2","@faker-js/faker":"^10.0.0","@keyv/redis":"^5.1.1","@keyv/valkey":"^1.0.8","@types/node":"^24.3.0","@vitest/coverage-v8":"^3.2.4","lru-cache":"^11.1.0","rimraf":"^6.0.1","tsup":"^8.5.0","typescript":"^5.9.2","vitest":"^3.2.4"},"keywords":["cacheable","caching","utilities","hashing","keyv","cache utils"],"scripts":{"build":"rimraf ./dist && tsup src/index.ts --format cjs,esm --dts --clean --minify","prepublish":"pnpm build","lint":"biome check --write --error-on-warnings","test":"pnpm lint && vitest run --coverage","test:ci":"biome check --error-on-warnings && vitest run --coverage","clean":"rimraf ./dist ./coverage ./node_modules"},"_id":"@cacheable/utils@2.0.2","bugs":{"url":"https://github.com/jaredwray/cacheable/issues"},"homepage":"https://github.com/jaredwray/cacheable#readme","_integrity":"sha512-JTFM3raFhVv8LH95T7YnZbf2YoE9wEtkPPStuRF9a6ExZ103hFvs+QyCuYJ6r0hA9wRtbzgZtwUCoDWxssZd4Q==","_resolved":"/private/var/folders/q4/x95kq1ln6cd7rrnct9cby32r0000gn/T/affac3fa1a8b6bf67ee5fcdd60051762/cacheable-utils-2.0.2.tgz","_from":"file:cacheable-utils-2.0.2.tgz","_nodeVersion":"22.12.0","_npmVersion":"11.6.0","dist":{"integrity":"sha512-JTFM3raFhVv8LH95T7YnZbf2YoE9wEtkPPStuRF9a6ExZ103hFvs+QyCuYJ6r0hA9wRtbzgZtwUCoDWxssZd4Q==","shasum":"5b28f9c653ca25ad9ab638ed4a98103afd7d88cf","tarball":"https://registry.npmjs.org/@cacheable/utils/-/utils-2.0.2.tgz","fileCount":7,"unpackedSize":40071,"signatures":[{"keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U","sig":"MEUCIHTe0MLvGwpT8363UkiR2ySYcu9cnzUvYKXepslAgfvOAiEAuUjfu2rnsag0BErj6IRaMDs4bUeHMts+g3cOVuN41qU="}]},"_npmUser":{"name":"jaredwray","email":"me@jaredwray.com"},"directories":{},"maintainers":[{"name":"jaredwray","email":"me@jaredwray.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages-npm-production","tmp":"tmp/utils_2.0.2_1758555852839_0.26843365552242826"},"_hasShrinkwrap":false}},"time":{"created":"2025-07-25T04:45:56.505Z","modified":"2025-09-22T15:44:13.233Z","1.0.0":"2025-07-25T04:45:56.960Z","1.1.0":"2025-07-31T03:14:32.407Z","1.1.1":"2025-08-26T22:19:36.875Z","2.0.0":"2025-09-09T17:55:27.648Z","2.0.1":"2025-09-16T18:53:37.148Z","2.0.2":"2025-09-22T15:44:13.043Z"},"bugs":{"url":"https://github.com/jaredwray/cacheable/issues"},"author":{"name":"Jared Wray","email":"me@jaredwray.com"},"license":"MIT","homepage":"https://github.com/jaredwray/cacheable#readme","keywords":["cacheable","caching","utilities","hashing","keyv","cache utils"],"repository":{"type":"git","url":"git+https://github.com/jaredwray/cacheable.git","directory":"packages/utils"},"description":"Cacheable Utilities for Caching Libraries","maintainers":[{"name":"jaredwray","email":"me@jaredwray.com"}],"readme":"[<img align=\"center\" src=\"https://cacheable.org/logo.svg\" alt=\"Cacheable\" />](https://github.com/jaredwray/cacheable)\n\n> Cacheble Utils\n\n[![codecov](https://codecov.io/gh/jaredwray/cacheable/graph/badge.svg?token=lWZ9OBQ7GM)](https://codecov.io/gh/jaredwray/cacheable)\n[![tests](https://github.com/jaredwray/cacheable/actions/workflows/tests.yml/badge.svg)](https://github.com/jaredwray/cacheable/actions/workflows/tests.yml)\n[![npm](https://img.shields.io/npm/dm/@cacheable/utils.svg)](https://www.npmjs.com/package/@cacheable/utils)\n[![npm](https://img.shields.io/npm/v/@cacheable/utils)](https://www.npmjs.com/package/@cacheable/utils)\n[![license](https://img.shields.io/github/license/jaredwray/cacheable)](https://github.com/jaredwray/cacheable/blob/main/LICENSE)\n\n`@cacheable/utils` is a collecton of utility functions, helpers, and types for `cacheable` and other caching libraries. It provides a robust set of features to enhance caching capabilities, including:\n\n* Data Types for Caching Items\n* Hash Functions for Key Generation\n* Coalesce Async for Handling Multiple Promises\n* Stats Helpers for Caching Statistics\n* Sleep / Delay for Testing and Timing\n* Time to Live (TTL) Helpers\n\n# Table of Contents\n* [Getting Started](#getting-started)\n* [Cacheable Types](#cacheable-types)\n* [Coalesce Async](#coalesce-async)\n* [Hash Functions](#hash-functions)\n* [Shorthand Time Helpers](#shorthand-time-helpers)\n* [Sleep Helper](#sleep-helper)\n* [Stats Helpers](#stats-helpers)\n* [Time to Live (TTL) Helpers](#time-to-live-ttl-helpers)\n* [Run if Function Helper](#run-if-function-helper)\n* [Less Than Helper](#less-than-helper)\n* [Is Object Helper](#is-object-helper)\n* [How to Contribute](#how-to-contribute)\n* [License and Copyright](#license-and-copyright)\n\n# Getting Started\n\n`cacheable` is primarily used as an extension to your caching engine with a robust storage backend [Keyv](https://keyv.org), Memoization (Wrap), Hooks, Events, and Statistics.\n\n```bash\nnpm install @cacheable/utils --save\n```\n\n# Cacheable Types\n\nThe `@cacheable/utils` package provides various types that are used throughout the caching library. These types help in defining the structure of cached items, ensuring type safety and consistency across your caching operations.\n\n```typescript\n\n/**\n * CacheableItem\n * @typedef {Object} CacheableItem\n * @property {string} key - The key of the cacheable item\n * @property {any} value - The value of the cacheable item\n * @property {number|string} [ttl] - Time to Live - If you set a number it is miliseconds, if you set a string it is a human-readable\n * format such as `1s` for 1 second or `1h` for 1 hour. Setting undefined means that it will use the default time-to-live. If both are\n * undefined then it will not have a time-to-live.\n */\nexport type CacheableItem = {\n\tkey: string;\n\tvalue: any;\n\tttl?: number | string;\n};\n\n/**\n * CacheableStoreItem\n * @typedef {Object} CacheableStoreItem\n * @property {string} key - The key of the cacheable store item\n * @property {any} value - The value of the cacheable store item\n * @property {number} [expires] - The expiration time in milliseconds since epoch. If not set, the item does not expire.\n */\nexport type CacheableStoreItem = {\n\tkey: string;\n\tvalue: any;\n\texpires?: number;\n};\n```\n\n# Coalesce Async\n\nThe `coalesceAsync` function is a utility that allows you to handle multiple asynchronous operations efficiently. It was designed by `Douglas Cayers` https://github.com/douglascayers/promise-coalesce. It helps in coalescing multiple promises into a single promise, ensuring that only one operation is executed at a time for the same key.\n\n```typescript\nimport { coalesceAsync } from '@cacheable/utils';\n\nconst fetchData = async (key: string) => {\n  // Simulate an asynchronous operation\n  return new Promise((resolve) => setTimeout(() => resolve(`Data for ${key}`), 1000));\n};\n\nconst result = await Promise.all([\n\tcoalesceAsync('my-key', fetchData),\n\tcoalesceAsync('my-key', fetchData),\n\tcoalesceAsync('my-key', fetchData),\n]);\nconsole.log(result); // Data for my-key only executed once\n```\n\n# Hash Functions\n\nThe `@cacheable/utils` package provides hash functions that can be used to generate unique keys for caching operations. These functions are useful for creating consistent and unique identifiers for cached items.\n\n```typescript\nimport { hash } from '@cacheable/utils';\n\nconst key = hash('my-cache-key');\nconsole.log(key); // Unique hash for 'my-cache-key'\n```\n\nIf you want to get a number hash you can use the `hashToNumber` function:\n\n```typescript\nimport { hash, hashToNumber } from '@cacheable/utils';\n\nconst min = 0;\nconst max = 10;\n\nconst result = hashToNumber({foo: 'bar'}, min, max, HashAlgorithm.DJB2);\nconsole.log(result); // A number between 0 and 10 based on the hash value\n```\n\n# Shorthand Time Helpers\n\nThe `@cacheable/utils` package provides a shorthand function to convert human-readable time strings into milliseconds. This is useful for setting time-to-live (TTL) values in caching operations.\n\nYou can also use the `shorthandToMilliseconds` function:\n\n```typescript\nimport { shorthandToMilliseconds } from '@cacheable/utils';\n\nconst milliseconds = shorthandToMilliseconds('1h');\nconsole.log(milliseconds); // 3600000\n```\n\nYou can also use the `shorthandToTime` function to get the current date plus the shorthand time:\n\n```typescript\nimport { shorthandToTime } from '@cacheable/utils';\n\nconst currentDate = new Date();\nconst timeInMs = shorthandToTime('1h', currentDate);\nconsole.log(timeInMs); // Current date + 1 hour in milliseconds since epoch\n```\n\n# Sleep Helper\n\nThe `sleep` function is a utility that allows you to pause execution for a specified duration. This can be useful in testing scenarios or when you need to introduce delays in your code.\n\n```typescript\nimport { sleep } from '@cacheable/utils';\n\nawait sleep(1000); // Pause for 1 second\nconsole.log('Execution resumed after 1 second');\n```\n\n# Stats Helpers\n\nThe `@cacheable/utils` package provides statistics helpers that can be used to track and analyze caching operations. These helpers can be used to gather metrics such as hit rates, miss rates, and other performance-related statistics.\n\n```typescript\nimport { stats } from '@cacheable/utils';\n\nconst cacheStats = stats();\ncacheStats.incrementHits();\nconsole.log(cacheStats.hits); // Get the hit rate of the cache\n```\n\n# Time to Live (TTL) Helpers\n\nThe `@cacheable/utils` package provides helpers for managing time-to-live (TTL) values for cached items. \n\nYou can use the `calculateTtlFromExpiration` function to calculate the TTL based on an expiration date:\n\n```typescript\nimport { calculateTtlFromExpiration } from '@cacheable/utils';\n\nconst expirationDate = new Date(Date.now() + 1000 * 60 * 5); // 5 minutes from now\nconst ttl = calculateTtlFromExpiration(Date.now(), expirationDate);\nconsole.log(ttl); // 300000\n```\n\nYou can also use `getTtlFromExpires` to get the TTL from an expiration date:\n\n```typescript\nimport { getTtlFromExpires } from '@cacheable/utils';\n\nconst expirationDate = new Date(Date.now() + 1000 * 60 * 5); // 5 minutes from now\nconst ttl = getTtlFromExpires(expirationDate);\nconsole.log(ttl); // 300000\n```\n\nYou can use `getCascadingTtl` to get the TTL for cascading cache operations:\n\n```typescript\nimport { getCascadingTtl } from '@cacheable/utils';\nconst cacheableTtl = 1000 * 60 * 5; // 5 minutes\nconst primaryTtl = 1000 * 60 * 2; // 2 minutes\nconst secondaryTtl = 1000 * 60; // 1 minute\nconst ttl = getCascadingTtl(cacheableTtl, primaryTtl, secondaryTtl);\n```\n\n# Run if Function Helper\n\nThe `runIfFn` utility function provides a convenient way to conditionally execute functions or return values based on whether the input is a function or not. This pattern is commonly used in UI libraries and configuration systems where values can be either static or computed.\n\n```typescript\nimport { runIfFn } from '@cacheable/utils';\n\n// Static value - returns the value as-is\nconst staticValue = runIfFn('hello world');\nconsole.log(staticValue); // 'hello world'\n\n// Function with no arguments - executes the function\nconst dynamicValue = runIfFn(() => new Date().toISOString());\nconsole.log(dynamicValue); // Current timestamp\n\n// Function with arguments - executes with provided arguments\nconst sum = runIfFn((a: number, b: number) => a + b, 5, 10);\nconsole.log(sum); // 15\n\n// Complex example with conditional logic\nconst getConfig = (isDevelopment: boolean) => ({\n  apiUrl: isDevelopment ? 'http://localhost:3000' : 'https://api.example.com',\n  timeout: isDevelopment ? 5000 : 30000\n});\n\nconst config = runIfFn(getConfig, true);\nconsole.log(config); // { apiUrl: 'http://localhost:3000', timeout: 5000 }\n```\n\n# Less Than Helper\n\nThe `lessThan` utility function provides a safe way to compare two values and determine if the first value is less than the second. It only performs the comparison if both values are valid numbers, returning `false` for any non-number inputs.\n\n```typescript\nimport { lessThan } from '@cacheable/utils';\n\n// Basic number comparisons\nconsole.log(lessThan(1, 2)); // true\nconsole.log(lessThan(2, 1)); // false\nconsole.log(lessThan(1, 1)); // false\n\n// Works with negative numbers\nconsole.log(lessThan(-1, 0)); // true\nconsole.log(lessThan(-2, -1)); // true\n\n// Works with decimal numbers\nconsole.log(lessThan(1.5, 2.5)); // true\nconsole.log(lessThan(2.7, 2.7)); // false\n\n// Safe handling of non-number values\nconsole.log(lessThan(\"1\", 2)); // false\nconsole.log(lessThan(1, \"2\")); // false\nconsole.log(lessThan(null, 1)); // false\nconsole.log(lessThan(undefined, 1)); // false\nconsole.log(lessThan(NaN, 1)); // false\n\n// Useful in filtering and sorting operations\nconst numbers = [5, 2, 8, 1, 9];\nconst lessThanFive = numbers.filter(n => lessThan(n, 5));\nconsole.log(lessThanFive); // [2, 1]\n\n// Safe comparison in conditional logic\nfunction processValue(a?: number, b?: number) {\n  if (lessThan(a, b)) {\n    return `${a} is less than ${b}`;\n  }\n  return 'Invalid comparison or a >= b';\n}\n```\n\nThis utility is particularly useful when dealing with potentially undefined or invalid numeric values, ensuring type safety in comparison operations.\n\n# Is Object Helper\n\nThe `isObject` utility function provides a type-safe way to determine if a value is a plain object. It returns `true` for objects but `false` for arrays, `null`, functions, and primitive types. This function also serves as a TypeScript type guard.\n\n```typescript\nimport { isObject } from '@cacheable/utils';\n\n// Basic object detection\nconsole.log(isObject({})); // true\nconsole.log(isObject({ name: 'John', age: 30 })); // true\nconsole.log(isObject(Object.create(null))); // true\n\n// Arrays are not considered objects\nconsole.log(isObject([])); // false\nconsole.log(isObject([1, 2, 3])); // false\n\n// null is not considered an object (despite typeof null === 'object')\nconsole.log(isObject(null)); // false\n\n// Primitive types return false\nconsole.log(isObject('string')); // false\nconsole.log(isObject(123)); // false\nconsole.log(isObject(true)); // false\nconsole.log(isObject(undefined)); // false\n\n// Functions return false\nconsole.log(isObject(() => {})); // false\nconsole.log(isObject(Date)); // false\n\n// Built-in object types return true\nconsole.log(isObject(new Date())); // true\nconsole.log(isObject(/regex/)); // true\nconsole.log(isObject(new Error('test'))); // true\nconsole.log(isObject(new Map())); // true\n\n// TypeScript type guard usage\nfunction processValue(value: unknown) {\n  if (isObject<{ name: string; age: number }>(value)) {\n    // TypeScript now knows value is an object with name and age properties\n    console.log(`Name: ${value.name}, Age: ${value.age}`);\n  }\n}\n\n// Useful for configuration validation\nfunction validateConfig(config: unknown) {\n  if (!isObject(config)) {\n    throw new Error('Configuration must be an object');\n  }\n  \n  // Safe to access object properties\n  return config;\n}\n\n// Filtering arrays for objects only\nconst mixedArray = [1, 'string', {}, [], null, { valid: true }];\nconst objectsOnly = mixedArray.filter(isObject);\nconsole.log(objectsOnly); // [{}', { valid: true }]\n```\n\nThis utility is particularly useful for:\n- **Type validation** - Ensuring values are objects before accessing properties\n- **TypeScript type guarding** - Narrowing types in conditional blocks\n- **Configuration parsing** - Validating that configuration values are objects\n- **Data filtering** - Separating objects from other data types\n\n# How to Contribute\n\nYou can contribute by forking the repo and submitting a pull request. Please make sure to add tests and update the documentation. To learn more about how to contribute go to our main README [https://github.com/jaredwray/cacheable](https://github.com/jaredwray/cacheable). This will talk about how to `Open a Pull Request`, `Ask a Question`, or `Post an Issue`.\n\n# License and Copyright\n[MIT © Jared Wray](./LICENSE)\n","readmeFilename":"README.md"}